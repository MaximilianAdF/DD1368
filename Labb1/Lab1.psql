-- Drop existing types if they exist
DROP TYPE IF EXISTS paymentMethodType CASCADE;
DROP TYPE IF EXISTS tagsType CASCADE;


-- Drop schema if it exists
DROP SCHEMA IF EXISTS Lab1 CASCADE;
CREATE SCHEMA Lab1;
SET search_path TO Lab1;


-- Create ENUM types
CREATE TYPE paymentMethodType AS ENUM ('Klarna', 'Swish', 'Card', 'Bitcoin');
CREATE TYPE tagsType AS ENUM ('Crypto', 'Studying', 'Question', 'Social');


CREATE TABLE "User" (
    userID SERIAL PRIMARY KEY,
    fullName VARCHAR(255) NOT NULL
);

-- Table for friendships
CREATE TABLE "Friend" (
    userID1 INT NOT NULL,
    userID2 INT NOT NULL,
    FOREIGN KEY (userID1) REFERENCES "User"(userID) ON DELETE CASCADE,
    FOREIGN KEY (userID2) REFERENCES "User"(userID) ON DELETE CASCADE,
    PRIMARY KEY (userID1, userID2),
    CHECK (userID1 < userID2) -- Enforces canonical order to not have duplicates (userID1 userID2) and (userID2 userID1)
);


-- Create Subscription table
CREATE TABLE "Subscription" (
    subscriptionID SERIAL PRIMARY KEY,
    userID INT NOT NULL UNIQUE, -- One subscription per user
    dateOfPayment DATE NOT NULL,
    paymentMethod paymentMethodType NOT NULL,  -- Use type for payment method
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);

-- Create Post table
CREATE TABLE "Post" (
    postID SERIAL PRIMARY KEY CHECK (postID > 0),
    userID INT NOT NULL,
    title VARCHAR(255),
    date DATE DEFAULT CURRENT_DATE NOT NULL,
    place VARCHAR(255),
    tags tagsType[],  -- Use type for tags
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);

-- Create ImagePost table
CREATE TABLE "ImagePost" (
    postID INT PRIMARY KEY,
    imageUrl VARCHAR(255) NOT NULL,
    filter VARCHAR(50),
    FOREIGN KEY (postID) REFERENCES "Post"(postID) ON DELETE CASCADE
);

-- Create TextPost table
CREATE TABLE "TextPost" (
    postID INT PRIMARY KEY,
    textContent TEXT NOT NULL,
    FOREIGN KEY (postID) REFERENCES "Post"(postID) ON DELETE CASCADE
);

-- Create VideoPost table
CREATE TABLE "VideoPost" (
    postID INT PRIMARY KEY,
    videoUrl VARCHAR(255) NOT NULL,
    codec VARCHAR(50) NOT NULL,
    FOREIGN KEY (postID) REFERENCES "Post"(postID) ON DELETE CASCADE
);

-- Create Like table
CREATE TABLE "Like" (
    postID INT NOT NULL,
    userID INT NOT NULL,
    timestamp DATE DEFAULT CURRENT_DATE NOT NULL,
    PRIMARY KEY (postID, userID),
    FOREIGN KEY (postID) REFERENCES "Post"(postID) ON DELETE CASCADE,
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);

-- Create Event table
CREATE TABLE "Event" (
    eventID SERIAL PRIMARY KEY,
    userID INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    place VARCHAR(255) NOT NULL,
    startDate DATE NOT NULL,
    endDate DATE NOT NULL CHECK (endDate >= startDate),
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);

-- Create Attendee table
CREATE TABLE "Attendee" (
    eventID INT NOT NULL,
    userID INT NOT NULL,
    PRIMARY KEY (eventID, userID),
    FOREIGN KEY (eventID) REFERENCES "Event"(eventID) ON DELETE CASCADE,
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);
