-- Drop existing types if they exist
DROP TYPE IF EXISTS paymentMethodType CASCADE;
DROP TYPE IF EXISTS tagsType CASCADE;


-- Drop schema if it exists
DROP SCHEMA IF EXISTS Lab1 CASCADE;
CREATE SCHEMA Lab1;
SET search_path TO Lab1;


-- Create ENUM types
CREATE TYPE paymentMethodType AS ENUM ('Klarna', 'Swish', 'Card', 'Bitcoin');
CREATE TYPE tagsType AS ENUM ('Crypto', 'Studying', 'Question', 'Social');


-- Function for mutual friendships
CREATE OR REPLACE FUNCTION add_friend(userA INT, userB INT) RETURNS VOID AS $$
DECLARE
    userA_name VARCHAR(255);
    userB_name VARCHAR(255);
BEGIN
    -- Check if both users exist
    IF NOT EXISTS (SELECT 1 FROM "User" WHERE userID = userA) THEN
        RAISE EXCEPTION 'User A with ID % does not exist', userA;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM "User" WHERE userID = userB) THEN
        RAISE EXCEPTION 'User B with ID % does not exist', userB;
    END IF;

    -- Retrieve the names of the users
    SELECT fullName INTO userA_name FROM "User" WHERE userID = userA;
    SELECT fullName INTO userB_name FROM "User" WHERE userID = userB;

    -- Check if userB is already in userA's friends array
    IF EXISTS (
        SELECT 1 
        FROM "User" 
        WHERE userID = userA 
          AND friends IS NOT NULL 
          AND userB = ANY(friends)
    ) THEN
        RAISE NOTICE 'Users % and % are already friends.', userA_name, userB_name;
        RETURN;
    END IF;

    -- Check if userA is already in userB's friends array
    IF EXISTS (
        SELECT 1 
        FROM "User" 
        WHERE userID = userB 
          AND friends IS NOT NULL 
          AND userA = ANY(friends)
    ) THEN
        RAISE NOTICE 'Users % and % are already friends.', userA_name, userB_name;
        RETURN;
    END IF;

    -- Add userB to userA's friends array
    UPDATE "User"
    SET friends = COALESCE(ARRAY_APPEND(friends, userB), ARRAY[userB])
    WHERE userID = userA;

    -- Add userA to userB's friends array
    UPDATE "User"
    SET friends = COALESCE(ARRAY_APPEND(friends, userA), ARRAY[userA])
    WHERE userID = userB;

    -- Raise notice with full names
    RAISE NOTICE 'Users % and % are now friends.', userA_name, userB_name;
END;
$$ LANGUAGE plpgsql;



CREATE TABLE "User" (
    userID SERIAL PRIMARY KEY,
    fullName VARCHAR(255) NOT NULL,
    friends INT[]  -- Array of User IDs for friends
);

-- Create Subscription table
CREATE TABLE "Subscription" (
    subscriptionID SERIAL PRIMARY KEY,
    userID INT NOT NULL UNIQUE, -- One subscription per user
    dateOfPayment DATE NOT NULL,
    paymentMethod paymentMethodType NOT NULL,  -- Use type for payment method
    expiryDate DATE GENERATED ALWAYS AS (dateOfPayment + INTERVAL '30 days') STORED,
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);

-- Create Post table
CREATE TABLE "Post" (
    postID SERIAL PRIMARY KEY CHECK (postID > 0),
    userID INT NOT NULL,
    title VARCHAR(255),
    date DATE DEFAULT CURRENT_DATE NOT NULL,
    place VARCHAR(255),
    tags tagsType[],  -- Use type for tags
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);

-- Create ImagePost table
CREATE TABLE "ImagePost" (
    postID INT PRIMARY KEY,
    imageUrl VARCHAR(255) NOT NULL,
    filter VARCHAR(50),
    FOREIGN KEY (postID) REFERENCES "Post"(postID) ON DELETE CASCADE
);

-- Create TextPost table
CREATE TABLE "TextPost" (
    postID INT PRIMARY KEY,
    textContent TEXT NOT NULL,
    FOREIGN KEY (postID) REFERENCES "Post"(postID) ON DELETE CASCADE
);

-- Create VideoPost table
CREATE TABLE "VideoPost" (
    postID INT PRIMARY KEY,
    videoUrl VARCHAR(255) NOT NULL,
    codec VARCHAR(50) NOT NULL,
    FOREIGN KEY (postID) REFERENCES "Post"(postID) ON DELETE CASCADE
);

-- Create Like table
CREATE TABLE "Like" (
    postID INT NOT NULL,
    userID INT NOT NULL,
    timestamp DATE DEFAULT CURRENT_DATE NOT NULL,
    PRIMARY KEY (postID, userID),
    FOREIGN KEY (postID) REFERENCES "Post"(postID) ON DELETE CASCADE,
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);

-- Create Event table
CREATE TABLE "Event" (
    eventID SERIAL PRIMARY KEY,
    userID INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    place VARCHAR(255) NOT NULL,
    startDate DATE NOT NULL,
    endDate DATE NOT NULL CHECK (endDate >= startDate),
    duration INT GENERATED ALWAYS AS (endDate - startDate) STORED, -- Duration in days
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);

-- Create Attendee table
CREATE TABLE "Attendee" (
    eventID INT NOT NULL,
    userID INT NOT NULL,
    PRIMARY KEY (eventID, userID),
    FOREIGN KEY (eventID) REFERENCES "Event"(eventID) ON DELETE CASCADE,
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);
