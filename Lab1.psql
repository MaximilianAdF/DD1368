-- Drop existing types if they exist
DROP TYPE IF EXISTS paymentMethodType CASCADE;
DROP TYPE IF EXISTS tagsType CASCADE;

-- Create ENUM types
CREATE TYPE paymentMethodType AS ENUM ('Klarna', 'Swish', 'Card', 'Bitcoin');
CREATE TYPE tagsType AS ENUM ('Crypto', 'Studying', 'Question', 'Social');



-- Create User table
-- Create a function to update friends mutually
CREATE OR REPLACE FUNCTION update_friends_mutually() RETURNS TRIGGER AS $$
BEGIN
    -- Add the new friend to the friend's friends list
    UPDATE "User"
    SET friends = array_append(friends, NEW.userID)
    WHERE userID = ANY(NEW.friends);

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to call the function after insert or update on the User table
CREATE TRIGGER update_friends_trigger
AFTER INSERT OR UPDATE OF friends ON "User"
FOR EACH ROW
EXECUTE FUNCTION update_friends_mutually();

CREATE TABLE "User" (
    userID SERIAL PRIMARY KEY,
    fullName VARCHAR(255) NOT NULL,
    friends INT[]  -- Array of User IDs for friends
);

-- Create Subscription table
CREATE TABLE "Subscription" (
    subscriptionID SERIAL PRIMARY KEY,
    userID INT NOT NULL,
    dateOfPayment DATE NOT NULL,
    paymentMethod paymentMethodType NOT NULL,  -- Use ENUM type for payment method
    expiryDate DATE NOT NULL,
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);

-- Create Post table
CREATE TABLE "Post" (
    postID SERIAL PRIMARY KEY CHECK (postID > 0),
    userID INT NOT NULL,
    title VARCHAR(255),
    date DATE DEFAULT CURRENT_DATE NOT NULL,
    place VARCHAR(255),
    tags tagsType[],  -- Use ENUM type for tags
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);

-- Create ImagePost table
CREATE TABLE "ImagePost" (
    postID INT PRIMARY KEY,
    imageUrl VARCHAR(255) NOT NULL,
    filter VARCHAR(50),
    FOREIGN KEY (postID) REFERENCES "Post"(postID) ON DELETE CASCADE
);

-- Create TextPost table
CREATE TABLE "TextPost" (
    postID INT PRIMARY KEY,
    textContent TEXT NOT NULL,
    FOREIGN KEY (postID) REFERENCES "Post"(postID) ON DELETE CASCADE
);

-- Create VideoPost table
CREATE TABLE "VideoPost" (
    postID INT PRIMARY KEY,
    videoUrl VARCHAR(255) NOT NULL,
    codec VARCHAR(50) NOT NULL,
    FOREIGN KEY (postID) REFERENCES "Post"(postID) ON DELETE CASCADE
);

-- Create Like table
CREATE TABLE "Like" (
    postID INT NOT NULL,
    userID INT NOT NULL,
    timestamp DATE DEFAULT CURRENT_DATE NOT NULL,
    PRIMARY KEY (postID, userID),
    FOREIGN KEY (postID) REFERENCES "Post"(postID) ON DELETE CASCADE,
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);

-- Create Event table
CREATE TABLE "Event" (
    eventID SERIAL PRIMARY KEY,
    userID INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    place VARCHAR(255) NOT NULL,
    startDate DATE NOT NULL,
    endDate DATE NOT NULL CHECK (endDate >= startDate),
    duration INT NOT NULL,
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);

-- Create Attendee table
CREATE TABLE "Attendee" (
    eventID INT NOT NULL,
    userID INT NOT NULL,
    PRIMARY KEY (eventID, userID),
    FOREIGN KEY (eventID) REFERENCES "Event"(eventID) ON DELETE CASCADE,
    FOREIGN KEY (userID) REFERENCES "User"(userID) ON DELETE CASCADE
);
