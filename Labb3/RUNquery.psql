WITH RECURSIVE RiverBranches AS (
    -- Base case: Start from the specified rivers
    SELECT
        1 AS BranchLevel,
        r.Name AS RiverName,
        r.Length AS TotalLength,
        ARRAY[r.Name]::VARCHAR[] AS Path,
        r.Name AS RootRiver
    FROM
        River r
    WHERE
        r.Name IN ('Nile', 'Amazonas', 'Yangtze', 'Rhein', 'Donau', 'Mississippi')
    
    UNION ALL
    
    -- Recursive case: Continue traversing connecting rivers
    SELECT
        rb.BranchLevel + 1 AS BranchLevel,
        r2.Name AS RiverName,
        rb.TotalLength + r2.Length AS TotalLength,
        Path || r2.Name AS Path,
        rb.RootRiver
    FROM
        RiverBranches rb
    JOIN
        River r2 ON rb.RiverName = r2.River
    WHERE
        r2.Name != ALL(Path) -- Avoid revisiting rivers
), 

-- Get the longest path for each root river
AllRiverBranches AS (
    SELECT 
        Path,
        MAX(BranchLevel) AS LongestBranchLevel,
        MAX(TotalLength) AS TotalLength,
        RootRiver
    FROM
        RiverBranches
    GROUP BY
        RootRiver, Path
),

-- Select the longest branch level for each root river (RootRiver)
LongestBranchLevels AS (
    SELECT 
        RootRiver,
        MAX(LongestBranchLevel) AS LongestBranchLevel
    FROM
        AllRiverBranches
    GROUP BY
        RootRiver
)

-- Select all the longest paths for each root river
SELECT 
    RANK() OVER (ORDER BY lbl.LongestBranchLevel ASC) AS Rank,
    array_to_string(arb.Path, '-') AS Path,
    arb.LongestBranchLevel as NumRivers,
    arb.TotalLength as TotLength

FROM
    AllRiverBranches arb
JOIN 
    LongestBranchLevels lbl ON arb.RootRiver = lbl.RootRiver
WHERE
    arb.LongestBranchLevel = lbl.LongestBranchLevel
ORDER BY
    lbl.LongestBranchLevel, arb.TotalLength DESC;
